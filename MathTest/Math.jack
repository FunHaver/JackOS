// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
     // Number of bits used for representing a two's complement integer
    static Array twoToThe; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i,prod;
        let i = 0;
        let prod = 1;
        let twoToThe = Array.new(16); //Powers of two, for bit masking
        while (i < 16){
            let twoToThe[i] = prod;
            let prod = prod + prod;
            let i = i + 1;
        }
        return;
    }

    function boolean bit(int bit,int num){
        var int maskedBit;
        let maskedBit = num & twoToThe[bit];

        if(maskedBit > 0){
            return true;
        } else {
            return false;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum,shiftedX,i,absX,absY;
        let sum = 0;
        let i = 0;     

        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let shiftedX = absX;

        while(i < 16) {

            if(Math.bit(i,absY)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        if((x < 0 & y > 0) | (x > 0 & y < 0)){
            return -sum;
        } else {
            return sum;
        }
        
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int q,absX,absY;
        var bool isNeg;
        let isNeg = false;
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        if((x < 0) & (y > 0)){
            let isNeg = true;
        }

        if((x > 0) & (y < 0)){
            let isNeg = true;
        }

        if(y > x){
            return 0;
        }

        let q = Math.divide(x, 2 * y);
        if((x - ((2 * q) * y)) < y){
            if(isNeg){
                return -(2 * q);
            } else {
                return 2 * q;
            }
            
        } else {
            if(isNeg){
                return -(2 * q) + 1;
            } else {
                return (2 * q) + 1;
            }
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int start,mid,end,ans;
        let start = 0;
        let end = x;

        while(start < end | start = end){
            let mid = (start + end) / 2;
            if(mid * mid = x){
                let ans = mid;
            }

            if (mid * mid < x){
                let start = mid + 1;
                let ans = mid;
            } else {
                let end = mid - 1;
            }
        }

        return ans;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a < b){
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (b < a) {
            return b;
        } else {
            return a;
        }
    }
    

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x > -1){
            return x;
        } else {
            return -x;
        }
    }
}
