// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
     // Number of bits used for representing a two's complement integer
    static Array twoToThe; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i,prod;
        let i = 0;
        let prod = 1;
        let twoToThe = Array.new(16); //Powers of two, for bit masking
        while (i < 16){
            let twoToThe[i] = prod;
            let prod = prod + prod;
            let i = i + 1;
        }
        return;
    }

    function boolean bit(int bit,int num){
        var int maskedBit;
        let maskedBit = num & twoToThe[bit];

        if(maskedBit > 0){
            return true;
        } else {
            return false;
        }
    }

    function int bitShiftLeft(int num){
        return num + num;
    }

    function int bitShiftRight(int num){
        var int i,y;
        while(i < 15){
            let y = y + y;
            if(num < 0){
                let y = y | 1;
            }
            let num = num + num;
            let i = i + 1;
        }
        return y;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum,shiftedX,i,absX,absY,bit;
        let sum = 0;
        let i = 0;     
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let shiftedX = absX;
        let bit = 1;
        while(i < 16) {

            if((absY & bit) = bit){
                let sum = sum + shiftedX;
            }
            let shiftedX = Math.bitShiftLeft(shiftedX);
            let i = i + 1;
            let bit = bit + bit;
        }
        if((x < 0 & y > 0) | (x > 0 & y < 0)){
            return -sum;
        } else {
            return sum;
        }
        
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */

     //https://en.wikipedia.org/wiki/Division_algorithm (long division)
    function int divide(int numerator, int divisor) {
        var int quotient,remainder,numeratorSize,i,numeratorBit,absNumerator,absDivisor;
        if(divisor = 0){
            return 0;
        }
        let absNumerator = numerator;
        let absDivisor = divisor;
        if(absNumerator < 0){
            let absNumerator = Math.abs(absNumerator);
        }
        if(absDivisor < 0){
            let absDivisor = Math.abs(absDivisor);
        }

        let quotient = 0;
        let numeratorSize = 15;
        let remainder = 0;
        let i = numeratorSize;
        while(i > -1){
            let remainder = Math.bitShiftLeft(remainder); //e.g. 01 -> 10
            let numeratorBit = Math.bit(i,absNumerator); // f(3,8) -> true a.k.a. 1
            if(numeratorBit){
                let remainder = remainder + 1;
            }

            if((remainder > absDivisor) | (remainder = absDivisor)){
                let remainder = remainder - absDivisor;
                let quotient = quotient + twoToThe[i];
            }
            let i = i - 1;
        }

        
        if((numerator < 0) & (divisor > 0)){
            return -quotient;
        }

        if((numerator > 0) & (divisor < 0)){
            return -quotient;
        }
        return quotient;

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        //16 bit numbers mean that we search from 0 to 16/2 - 1
        var int y,j,c,csq;
        let y = 0;
        let j = 7;
        while(j > -1){
            let c = y + twoToThe[j];
            let csq = c * c;
            if((csq > 0) & ((csq < x) | (csq = x))){
                let y = c;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a < b){
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (b < a) {
            return b;
        } else {
            return a;
        }
    }
    

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x > -1){
            return x;
        } else {
            return -x;
        }
    }

    function int pow(int base, int power){
        var int ans;
        let ans = base;
        while(power > 1){
            let ans = ans * base;
            let power = power - 1;
        }
        if(power = 1){
            return ans;
        } else {
            return 1;
        }
    }

    //Truncates to integer(e.g. log base 10 of 99) is 1
    //Accepts all positive integers
    function int log10(int x){
        var int divByTen,ans;
        let divByTen = x;
        let ans = 0;

        if(x < 10){
            return 0;
        } else {
            while(divByTen > 9){
                let divByTen = divByTen / 10;
                let ans = ans + 1;
            }

            return ans;
        }
    }

    function int mod(int x, int y){
        while((x > y) | (x = y)){
            let x = x - y;
        }
        return x;
    }
}
